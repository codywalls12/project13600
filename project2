/*
Cody Walls will be submitting the project for our group.
team members:
        Deakon Watson (3 | 4)
        Muzhda Wahedi (2)
        Cody Walls (1)
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <dirent.h>
#include <errno.h>
#include<sys/wait.h>
#include<readline/readline.h>
#include<readline/history.h>

//defines for Deakon W
#define MAXCOM 1000 //number of letters to be supported
#define MAXLIST 100 //number of commands to be supported
//To Clear shell
#define clear() printf("\033[H\033[J")
#define TRUE 1
#define FALSE !TRUE
#define MAX_BUFFER_SIZE 512
#define MAX_ARG_LEN 100
#define MAX_ARG_COUNT 10
#define CMD_LEN 50
#define CMDLINE_LEN 512
#define MAX_PATH_LEN 255

//define for Muzhda
#define BUF_SIZE 300

char PS1[100];
char PATH[255];
char currentDirectory[MAX_PATH_LEN];
int returnStatus = 0;
char *progName;

typedef enum { CD, EXIT, CMD, PWD, ECHO } CMDTYPE;

/*

** Funtion that is executed at the start of the shell

*/

void init()

{

strcpy(PS1, "[batchFile] ");

if (getcwd(currentDirectory, MAX_PATH_LEN) == NULL)

{

perror("getcwd");

exit(1);

}

strcpy(PATH, "/bin");

}

/*

** Prints the prompt string

*/

void showPrompt()

{

printf("%s:%s", currentDirectory, PS1);

}

/*

** Prints the welcome message at the start of the shell

*/

void showWelcomeScreen()

{

// printf("Welcome to GAK Shell...\n");

}

/*

** Helper function to parse the command line entered in the shell

**

** @param: command line entered

** @param: pointer to command string (used as output)

** @param: pointer to list of command line argument strings (used as output)

** @param: pointer to count of command line arguments (used as output)

*/

void parseCmdline(const char *cmdline, char *cmd, char ***cmd_argv, int *cmd_argc)

{

int i = 0;

int temp_argc = 0;

int start_index;

char **temp_argv = NULL;

while (cmdline[i] != ' ' && cmdline[i] != '\0' && i < CMD_LEN)

{

cmd[i] = cmdline[i];

i++;

}

if (i == CMD_LEN)

{

fprintf(stderr, "Cmd buffer overflow.\n");

exit(1);

}

cmd[i] = '\0';

/* if (cmdline[i] == '\0')

{

*cmd_argc = 0;

return;

}

*/

temp_argv = malloc(sizeof(char*));

temp_argv[temp_argc] = (char *) malloc((strlen(cmd)+1)*sizeof(char));

strcpy(temp_argv[temp_argc], cmd);

temp_argc++;

while (cmdline[i] != '\0')

{

while (cmdline[i] == ' ')

i++;

start_index = i;

while (cmdline[i] != ' ' && cmdline[i] != '\0')

i++;

if (temp_argv == NULL)

temp_argv = malloc(sizeof(char*));

else

temp_argv = realloc(temp_argv, (temp_argc+1)*sizeof(char*));

temp_argv[temp_argc] = (char *) malloc((i - start_index + 1) * sizeof(char));

//temp_argv[temp_argc] = (char *) malloc(MAX_ARG_LEN * sizeof(char));

strncpy(temp_argv[temp_argc], cmdline+start_index, (i - start_index));

temp_argv[temp_argc][i-start_index] = '\0';

temp_argc++;

}

temp_argv = realloc(temp_argv, (temp_argc+1)*sizeof(char*));

temp_argv[temp_argc] = NULL;

(*cmd_argv) = temp_argv;

(*cmd_argc) = temp_argc;

return;

}

/*

** Helper function that frees/deallocates the memory assigned during 'parseCmdline'

** function call

**

** @param: pointer to list of command line argument strings

** @param: pointer to count of command line arguments

*/

void freeCmdArgs(char ***cmd_argv, int *cmd_argc)

{

int i;

for (i = 0; i < (*cmd_argc); i++)

free((*cmd_argv)[i]);

if ((*cmd_argc) != 0)

free((*cmd_argv));

(*cmd_argc) = 0;

}

/*

** Helper function to identify the type of command

**

** @param: command string

*/

CMDTYPE getCmdType(const char *cmd)

{

if (strcmp(cmd, "exit") == 0)

return EXIT;

if (strcmp(cmd, "cd") == 0)

return CD;

if (strcmp(cmd, "pwd") == 0)

return PWD;

if (strcmp(cmd, "echo") == 0)

return ECHO;

return CMD;

}

/*

** Implementation of 'echo' command. Assumes that the possible options are

** 1. $? - print the last exit status

** 2. $$ - print the pid of shell

** 3. $<name> - print the value of the environment variable

** 4. <string> - print the string as is

**

** @param: count of command line arguments

** @param: list of command line argument strings

*/

void echoCmd(int argc, char **argv)

{

int i;

char *envVal;

for (i = 1; i < argc; i++)

{

// Print the last exit status

if (strcmp(argv[i], "$?") == 0)

printf("%d", returnStatus);

// Print the shell's pid

else if (strcmp(argv[i], "$$") == 0)

printf("%d", getpid());

else if (argv[i][0] == '$')

{

if ((envVal = getenv(argv[i]+1)) == NULL)

{

perror("getenv");

return;

}

else

printf("%s", envVal);

}

/*else if (strcmp(argv[i], "$PATH") == 0)

printf("%s", PATH);*/

else

printf("%s", argv[i]);

printf(" ");

}

printf("\n");

}

/*

** Takes care of validating the command path and executing the command

** by forking a child process

**

** @param: the command string

** @param: command line arguments count

** @param: list of command line arguments strings

**

** @return: exit status of the command  

*/

int execCmd (char *cmd, int argc, char **argv)

{

char cmdPath[MAX_PATH_LEN];

pid_t child_pid;

int retStat;

#ifdef DEBUG

printf ("cmd: %s\n", cmd);

printf ("PATH: %s\n", PATH);

#endif

if (cmd[0] == '/')

strcpy(cmdPath, cmd);

else if (cmd[0] == '.')

{

if (realpath(cmd, cmdPath) == NULL)

{

fprintf(stderr, "%s: '%s' not found\n", progName, cmd);

return 1;

}

}

else

{

strcpy(cmdPath, PATH);

strcat(cmdPath, "/");

strcat(cmdPath, cmd);

}

#ifdef DEBUG

printf("cmdPath: %s\n", cmdPath);

#endif

if (access(cmdPath, F_OK) != 0)

{

fprintf(stderr, "%s: '%s' not found\n", progName, cmd);

return 1;

}

else

{

child_pid = fork();

if (child_pid < 0)

{

perror("fork");

return -1;

}

else if (child_pid == 0)

{

if (execv(cmdPath, argv) == -1)

{

perror("execv");

return 1;

}

}

else

{

wait(&retStat);

return retStat;

}

}

}

/*

** Changes the current working directory of the program/shell

**

** @param: target path

*/

void changeDirectory(char *target)

{

char tempPath[MAX_PATH_LEN];

char tempCurDir[MAX_PATH_LEN];

/*

** 'target' contains an absolute address

** ex: /var/lib

*/

if (target[0] == '/')

strcpy(tempPath, target);

/*

** 'target' contains a relative address

** ex: foo/bar

*/

else

{

strcpy(tempPath, currentDirectory);

strcat(tempPath, "/");

strcat(tempPath, target);

}

/*

** Sanity check for the new path

*/

if (realpath(tempPath, tempCurDir) == NULL)

{

fprintf(stderr, "%s: cd: '%s': %s\n", progName, tempPath, strerror(errno));

return;

}

else

{

if (chdir(tempCurDir) == -1)

{

perror("chdir");

return;

}

strcpy(currentDirectory, tempCurDir);

}

}

/*

** Prints the current working directory using 'getcwd' library function

*/

void printCurrentWorkingDirectory()

{

char tempPath[MAX_PATH_LEN];

if (getcwd(tempPath, MAX_PATH_LEN) == NULL)

perror("getcwd");

else

printf("%s\n", tempPath);

}

/*

** Main function

**

** @param: count of command line arguments

** @param: list of command line argument strings

** @param: list of environment variable strings

*/

int main(int argc, char **argv, char **envp)

{

char cmdline[CMDLINE_LEN];

char cmd[CMD_LEN];

char **cmd_argv = NULL;

int cmd_argc;

int i;

int closeShell = FALSE;

char tempPath[MAX_PATH_LEN];

progName = argv[0];

init();

showWelcomeScreen();

while (closeShell != TRUE)

{

showPrompt();

gets(cmdline);

parseCmdline(cmdline, cmd, &cmd_argv, &cmd_argc);

#ifdef DEBUG

printf("++++++++++++++++++++++++++++++++++++++++++++++\n");

for (i = 0; i < cmd_argc; i++)

printf("argv[%d] = %s\n", i, cmd_argv[i]);

printf("++++++++++++++++++++++++++++++++++++++++++++++\n");

#endif

switch(getCmdType(cmd))

{

case ECHO:

echoCmd(cmd_argc, cmd_argv);

break;

case PWD:

printf("%s\n", currentDirectory);

break;

case EXIT:

closeShell = TRUE;

break;

case CD:

changeDirectory(cmd_argv[1]);

break;

case CMD:

returnStatus = execCmd(cmd, cmd_argc, cmd_argv);

break;

}

freeCmdArgs(&cmd_argv, &cmd_argc);

}

//Shell Start-up
void init_shell()
{
  clear();
  printf("\n\n\n\n**********Group 9 Shell Project********");
  char* username = getenv("USER");
  printf("\n\n\nUSER is: @%s", username);
  printf("\n");
  sleep(1);
  clear();
}

// Input Function
int takeInput(char* str)
{
  char* buf;

  buf = readline("\n>>> ");
  if (strlen(buf) != 0) {
      add_history(buf);
      strcpy(str, buf);
      return 0;
  } else {
      return 1;
  }
}

// Print Current Directory
void printDir()
{
  char cwd[1024];
  getcwd(cwd, sizeof(cwd));
  printf("\nDir: %s", cwd);
}

// System commands function
void execArgs(char** parsed)
{
  // Forking a child
  pid_t pid = fork();

  if (pid == -1) {
      printf("\n. . . Failed forking child");
      return;
  }
         else if (pid == 0)
         {
      if (execvp(parsed[0], parsed) < 0) {
          printf("\n. . . Could not execute command");
  }
      exit(0);
  }
         else
       {
      // waiting for child to terminate
      wait(NULL);
      return;
  }
}

// Piped system commands
void execArgsPiped(char** parsed, char** parsedpipe)
{
  // 0 is read end, 1 is write end
  int pipefd[2];
  pid_t p1, p2;

  if (pipe(pipefd) < 0) {
      printf("\n. . . Pipe could not be initialized");
      return;
  }
  p1 = fork();
  if (p1 < 0)
  {
      printf("\n. . .Could not fork");
      return;
  }

  if (p1 == 0)
  {
      // Child 1 executing..
      close(pipefd[0]);
      dup2(pipefd[1], STDOUT_FILENO);
      close(pipefd[1]);

      if (execvp(parsed[0], parsed) < 0)
      {
          printf("\n. . . Could not execute command 1..");
          exit(0);
      }
  }
  else
  {
      // Parent executing
      p2 = fork();

      if (p2 < 0) {
          printf("\n. . .Could not fork");
          return;
      }

      // Child 2 executing..
 
      if (p2 == 0)
      {
          close(pipefd[1]);
          dup2(pipefd[0], STDIN_FILENO);
          close(pipefd[0]);
          if (execvp(parsedpipe[0], parsedpipe) < 0)
          {
              printf("\n. . . Could not execute command 2");
              exit(0);
          }
      }
             else
      {
          // parent executing, waiting for two children
          wait(NULL);
          wait(NULL);
      }
  }
}

// Command list
void openHelp()
{
  puts("\n***Shell Commands List***"
      "\nList of Commands supported:"
      "\n> cd"
      "\n> ls"
      "\n> exit"
      "\n> and all other general commands available in UNIX shell"
      "\n> pipe handling"
      "\n> improper space handling");

  return;
}

// Commands Function
int ownCmdHandler(char** parsed)
{
  int NoOfOwnCmds = 4, i, switchOwnArg = 0;
  char* ListOfOwnCmds[NoOfOwnCmds];
  char* username;

  ListOfOwnCmds[0] = "exit";
  ListOfOwnCmds[1] = "cd";
  ListOfOwnCmds[2] = "help";
  ListOfOwnCmds[3] = "hello";

  for (i = 0; i < NoOfOwnCmds; i++)
  {
      if (strcmp(parsed[0], ListOfOwnCmds[i]) == 0)
      {
          switchOwnArg = i + 1;
          break;
      }
  }

  switch (switchOwnArg)
  {
  case 1:
      printf("\nThank you for using our shell. Goodbye\n");
      exit(0);
  case 2:
      chdir(parsed[1]);
      return 1;
  case 3:
      openHelp();
      return 1;
  case 4:
      username = getenv("USER");
      printf("\nHello %s.\nPlease don't break. "
          "\nUse help to know more..\n",
          username);
      return 1;
  default:
      break;
  }

  return 0;
}

// function for finding pipe
int parsePipe(char* str, char** strpiped)
{
  int i;
  for (i = 0; i < 2; i++)
  {
      strpiped[i] = strsep(&str, "|");
      if (strpiped[i] == NULL)
          break;
  }

  if (strpiped[1] == NULL)
      return 0; // returns zero if no pipe is found.
  else
  {
      return 1;
  }
}

// parsing command words
void parseSpace(char* str, char** parsed)
{
  int i;

  for (i = 0; i < MAXLIST; i++)
  {
      parsed[i] = strsep(&str, " ");

      if (parsed[i] == NULL)
          break;
      if (strlen(parsed[i]) == 0)
          i--;
  }
}

int processString(char* str, char** parsed, char** parsedpipe)
{

  char* strpiped[2];
  int piped = 0;

  piped = parsePipe(str, strpiped);

  if (piped)
  {
      parseSpace(strpiped[0], parsed);
      parseSpace(strpiped[1], parsedpipe);

  }
         else
  {

      parseSpace(str, parsed);
  }

  if (ownCmdHandler(parsed))
      return 0;
  else
      return 1 + piped;
}

int main()
{
  char inputString[MAXCOM], *parsedArgs[MAXLIST];
  char* parsedArgsPiped[MAXLIST];

  int execFlag = 0;
  init_shell();

  while (1)
  {
      printDir();
     
      if (takeInput(inputString))
          continue;
     
      execFlag = processString(inputString,
      parsedArgs, parsedArgsPiped);
 
      if (execFlag == 1)
          execArgs(parsedArgs);

      if (execFlag == 2)
          execArgsPiped(parsedArgs, parsedArgsPiped);
  }

     //buffer to store user input
char str[BUF_SIZE];
//shown before input taken each time
char *promptShown = "USER_NAME>";
//token
char *token;
token = strtok (str," ");
//loop t take input
while(str != NULL){
//empty
bzero(str, BUF_SIZE);
//print prompt rst each time
printf("%s",promptShown);
//get user input in str buffer
fgets(str, BUF_SIZE, stdin);
//check for cd
if(hasThisPrex(str,"cd") == 0){
// check for path for cd command
token = strchr(str,' ');
//parse parameter to cd command
if(token) {
char *tempTok = token + 1;
token = tempTok;
char *locationOfNewLine = strchr(token, '\n');
if(locationOfNewLine) {
*locationOfNewLine = '\0';
}
// calling cd method which is user dened
cd(token);
}
}
}
//return
return 0;
}
//check whether q is present in p or not as a prex
int hasThisPrex(char const *p, char const *q)
{
int i = 0;
for(i = 0;q[i];i++)
{
if(p[i] != q[i])
return -1;
}
return 0;
}
// user deend cd command
int cd(char *pth){
char path[BUF_SIZE];
strcpy(path,pth);
char cwd[BUF_SIZE];
if(pth[0] != '/'){
// now true for the dir in current working sirectory
getcwd(cwd,sizeof(cwd));
strcat(cwd,"/");
strcat(cwd,path);
chdir(cwd);
}else{
chdir(pth);
}
return 0;
}
